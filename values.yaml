# environnement: &environnement ovh
# phase: &phase demo

general:
  proxy:
  noProxy:
  
importer:
  delimiter: ";"
  schedule: "0 5 31 2 *"
  tableName: "identites"
  truncateTable: false
  permission: SELECT
  image:
    pullPolicy: IfNotPresent
    registry: "docker.io"
    repository: "mi-data-tooling/aws-cli-unzip"
    tag: "master"
    secret: registry-pull-secret
  bucket:
    url: "s3.fr-par.scw.cloud"
    port: "443"
    name: "mi-dso-data-tooling-dev"
    filePath: "depot/employee.csv"
    destPath: "/data/file.csv"
    ak: "" # access key s3 (A générer et renseigner)
    region: "fr-par"

pgrest:
  fullnameOverride: pgrest-tcnp
  anonRole: anon
  replicaCount: 1
  dbPool: 30
  dbMaxRows: 300
  loglevel: "info" # "crit", "error", "warn", "info"
  service:
    port: 3000
  admin:
    port: 3001
  ingress:
    enabled: true
    host: postgrest.example.com
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "256Mi"
      cpu: "250m"
  image:
    repository: bitnami/postgrest
    tag: 11.2.2-debian-11-r0
    pullPolicy: IfNotPresent
  hpa:
    replicaCountMin: 1
    replicaCountMax: 7
    averageMemory: 80

adminer:
  enabled: false
  config:
    design: ""
  resources:
    requests:
      memory: "128Mi"
      cpu: "250m"
    limits:
      memory: "128Mi"
      cpu: "250m"
  service:
    type: ClusterIP
    port: "8081"
  ingress:
    enabled: false
    hosts:
      - adminer.example.com

pgadmin4:
  fullnameOverride: pgadmin-tcnp
  enabled: true
  commonLabels:
    app: tcnp-infra
    tier: front
    component: pgadmin
  networkPolicy:
    enabled: false
  image:
    repository: crunchydata/crunchy-pgadmin4
    tag: centos8-13.6-4.7.5
  existingSecret: secret-tcnp
  secretKeys:
    pgadminPasswordKey: PGADMIN_SETUP_PASSWORD
  envVarsFromConfigMaps:
    - pgadmin-cm
  envVarsFromSecrets:
    - secret-tcnp
  containerPorts:
    http: 5050
  service:
    type: ClusterIP
    port: 5050
    targetPort: 5050
  ingress:
    enabled: true
    hosts:
      - host: pgadmin.example.com
        paths:
          - path: /
            pathType: Prefix
  resources:
    requests:
      memory: "128Mi"
      cpu: "250m"
    limits:
      memory: "256Mi"
      cpu: "500m"
  VolumePermissions:
    enabled: false
  init:
    resources:
      requests:
        memory: "128Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "250m"
  securityContext: ""
  containerSecurityContext:
    enabled: false
  podSecurityContext:
    enabled: false

global:
  postgresql:
    auth:
      existingSecret: postgres-tcnp
      username: "pgrest"
      database: "tcnp"

# Contrainte de sécurité Openshift
postgresql:
  image:
    debug: true
    tag: "14.9.0"
  fullnameOverride: postgres-tcnp
  commonLabels:
    app: tcnp-infra
    tier: db
    component: postgresql
  volumePermissions:
    enabled: false
    securityContext:
      runAsUser: "auto"
    resources:
      limits:
        memory: "128Mi"
        cpu: "500m"
      requests:
        memory: "128Mi"
        cpu: "250m"
  securityContext:
    enabled: false
  shmVolume:
    chmod:
      enabled: false
  containerSecurityContext:
    enabled: false
  podSecurityContext:
    enabled: false
  primary:
    resources:
      requests:
        memory: 1024Mi
        cpu: 2000m
      limits:
        memory: 1024Mi
        cpu: 2000m
    extraEnvVarsSecret: postgres-tcnp
    initdb:
      scriptsConfigMap: init-pg-cm
      user: "postgres"
    volumePermissions:
      enabled: false
      securityContext:
        runAsUser: "auto"
    securityContext:
      enabled: false
    shmVolume:
      chmod:
        enabled: false
    containerSecurityContext:
      enabled: false
    podSecurityContext:
      enabled: false
    extendedConfiguration: |
      max_connections = 210

swagger:
  fullnameOverride: swagger-ui
  image:
    pullPolicy: IfNotPresent
  ingress:
    enabled: true
    host: swagger-ui.example.com
  resources:
    requests:
      memory: "64Mi"
      cpu: "100m"
    limits:
      memory: "64Mi"
      cpu: "100m"
    
prometheus:
  enabledRules: false
  refapp: demo-tcnp

prometheus-blackbox-exporter:
  fullnameOverride: blackbox-exporter
  commonLabels:
    tier: monitoring
    component: prometheus-blackbox
    app: tcnp-infra
  resources:
    requests:
      memory: "64Mi"
      cpu: "100m"
    limits:
      memory: "64Mi"
      cpu: "100m"
  serviceAccount:
    create: false
  extraSecretMounts:
    - name: token-volume
      mountPath: /token
      secretName: blackbox-exporter-token
      readOnly: true
      defaultMode: 420
  config:
    modules:
      http_2xx:
        prober: http
        timeout: 5s
        http:
          valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
          follow_redirects: true
          preferred_ip_protocol: "ip4"
      http_2xx_with_auth:
        prober: http
        timeout: 5s
        http:
          valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
          method: GET
          follow_redirects: true
          fail_if_ssl: false
          fail_if_not_ssl: false
          tls_config:
            insecure_skip_verify: true
          preferred_ip_protocol: "ip4" # defaults to "ip6"
          ip_protocol_fallback: false  # no fallback to "ip6"
          authorization:
            credentials_file: "/token/credential.token"
      http_4xx_no_auth:
        prober: http
        http:
          method: GET
          valid_status_codes: [400,401]  # 400 : bad auth, 401 : no auth
          preferred_ip_protocol: "ip4"
          ip_protocol_fallback: false
          follow_redirects: true
          fail_if_ssl: false
          fail_if_not_ssl: false
          tls_config:
            insecure_skip_verify: true
  serviceMonitor:
    enabled: true
    selfMonitor:
      enabled: true
    targets:
    - name: pgrest-live
      url: http://pgrest-tcnp/live
      labels: {}
      interval: 15s
      scrapeTimeout: 15s
      module: http_2xx
    - name: pgrest-ready
      url: http://pgrest-tcnp/ready
      labels: {}
      interval: 15s
      scrapeTimeout: 15s
      module: http_2xx
    - name: pgrest-request-valid
      url: http://pgrest-tcnp/identites?prenoms_officiels_q=ilike.Astérix&limit=10
      labels: {}
      interval: 15s
      scrapeTimeout: 15s
      module: http_2xx_with_auth
    - name: pgrest-request-no-auth
      url: http://pgrest-tcnp/identites?prenoms_officiels_q=ilike.Astérix&limit=10
      labels: {}
      interval: 15s
      scrapeTimeout: 15s
      module: http_4xx_no_auth
